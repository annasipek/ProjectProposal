Title: Scroll, Pick, Play  

Problem: As a musician, it is sometimes hard to find other musicians in your area. Especially for people who may be more introverted, finding people you can make music with can be a daunting task. However, it doesn’t always have to be that way. This program will collect and hold profiles of people, allowing them to input various information about themselves such as instruments they play, music they’re interested in, and a short bio, and then you can search for specific things and message people who seem interesting/fit what you need.

Primary Stakeholder: The main users of this will be musicians and people associated with the music scene. It would be a good way to find members for a band, touring members, people to track instruments for an album, etc. 

Graphical User Interface: When you create a profile, there is a form you fill out with certain categories such as instruments played, preferred music genre (can have multiple), a place for photos, and a small area to write a little bit about your experience and musical history, as well as what you might be interested in. When you’re actually searching for musicians, there will be certain categories you can filter by, so if you’re looking for a jazz bassist you can filter by instrument and musical preference. It also filters based on location so that you aren’t finding people from across the country. But like on Tinder and other apps, you can change the distance you’re looking for if you aren’t finding what you need very close to you. Once you’ve input the parameters you want to search by, it’ll display the profiles of the people who fit those parameters, with the best matches showing towards the top and decreasing in relevance as you scroll down.

Data: The input data is fairly simple. It is the data that people provide upon starting the program/app if they want to create a profile. To store the profiles, a hash table will be used for quickly adding and retrieving the profiles. The hash function will take the string concatenation of  the instruments played and genres preferred, get the hash code for that specific string, and take the modulus of the size of the list to determine the index in which to store the profile. It will also store it in other indexes determined by various string combinations of instruments, genres, and the two together. So then when someone searches for specific attributes, the program can pull all of the profiles from that index to show. If there are multiple instruments or genres in the profile, the program will pull the lists of both that index as well as the indexes associated with the different combinations of instruments and genres parsed from the string combination of everything. In order to address collisions and to aid in the pulling of profiles, the collision strategy will be chained buckets using an Array of set size based on the combinations/permutations of instrument-genre combinations, with each index containing a Linked List of all of the profiles associated with that.
